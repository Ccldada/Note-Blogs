import{_ as e,c as a,o as t,a3 as i}from"./chunks/framework.DWT__QHq.js";const u=JSON.parse('{"title":"1. 基本使用","description":"","frontmatter":{},"headers":[],"relativePath":"Notes/09_git/git 基本使用.md","filePath":"Notes/09_git/git 基本使用.md"}'),o={name:"Notes/09_git/git 基本使用.md"},d=i('<h1 id="_1-基本使用" tabindex="-1">1. 基本使用 <a class="header-anchor" href="#_1-基本使用" aria-label="Permalink to &quot;1. 基本使用&quot;">​</a></h1><p>提交记录</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git commit</span></span></code></pre></div><p>![[Pasted image 20240723092805.png]] 新建分支</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git branch &lt;分支名&gt;</span></span></code></pre></div><p>切换分支</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout &lt;分支名&gt;</span></span></code></pre></div><p>创建一个新的分支同时切换到新创建的分支</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout -b &lt;your-branch-name&gt;</span></span></code></pre></div><p>两个分支合并到一起</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git merge &lt;需要合并的分支名&gt;</span></span></code></pre></div><p>取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。 Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git rebase</span></span></code></pre></div><p>![[Pasted image 20240723095239.png]] ![[Pasted image 20240723095314.png]] ![[Pasted image 20240723095353.png]]</p><h1 id="pasted-image-20240723095416-png-2-高级使用" tabindex="-1">![[Pasted image 20240723095416.png]]2. 高级使用 <a class="header-anchor" href="#pasted-image-20240723095416-png-2-高级使用" aria-label="Permalink to &quot;![[Pasted image 20240723095416.png]]2. 高级使用&quot;">​</a></h1><h2 id="head" tabindex="-1">HEAD <a class="header-anchor" href="#head" aria-label="Permalink to &quot;HEAD&quot;">​</a></h2><p>我们首先看一下 “HEAD”。 HEAD 是一个对当前所在分支的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</p><p>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p><p>HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</p><p>如果想看 HEAD 指向，可以通过 <code>cat .git/HEAD</code> 查看， 如果 HEAD 指向的是一个引用，还可以用 <code>git symbolic-ref HEAD</code> 查看它的指向</p><h3 id="分离的-head" tabindex="-1">分离的 HEAD <a class="header-anchor" href="#分离的-head" aria-label="Permalink to &quot;分离的 HEAD&quot;">​</a></h3><p>分离的 HEAD 就是让其指向了某个具体的提交记录而不是分支名。在命令执行之前的状态如下所示</p><h2 id="相对引用" tabindex="-1">相对引用 <a class="header-anchor" href="#相对引用" aria-label="Permalink to &quot;相对引用&quot;">​</a></h2><p>通过指定提交记录哈希值的方式在 Git 中移动不太方便。在实际应用时，并没有像本程序中这么漂亮的可视化提交树供你参考，所以你就不得不用 <code>git log</code> 来查查看提交记录的哈希值。</p><p>并且哈希值在真实的 Git 世界中也会更长（译者注：基于 SHA-1，共 40 位）。例如前一关的介绍中的提交记录的哈希值可能是 <code>fed2da64c0efc5293610bdd892f82a58e8cbc5d8</code>。舌头都快打结了吧...</p><p>比较令人欣慰的是，Git 对哈希的处理很智能。你只需要提供能够唯一标识提交记录的前几个字符即可。因此我可以仅输入<code>fed2</code> 而不是上面的一长串字符。</p><p>通过哈希值指定提交记录很不方便，所以 Git 引入了相对引用。这个就很厉害了!</p><p>使用相对引用的话，你就可以从一个易于记忆的地方（比如 <code>bugFix</code> 分支或 <code>HEAD</code>）开始计算。</p><p>相对引用非常给力，这里我介绍两个简单的用法：</p><ul><li>使用 <code>^</code> 向上移动 1 个提交记录</li><li>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 <code>~3</code> ![[Pasted image 20240723101202.png]] ![[Pasted image 20240723101215.png]] ![[Pasted image 20240723101253.png]]</li></ul><h3 id="操作符" tabindex="-1">“~”操作符 <a class="header-anchor" href="#操作符" aria-label="Permalink to &quot;“~”操作符&quot;">​</a></h3><p>如果你想在提交树中向上移动很多步的话，敲那么多 <code>^</code> 貌似也挺烦人的，Git 当然也考虑到了这一点，于是又引入了操作符 <code>~</code>。</p><p>该操作符后面可以跟一个数字（可选，不跟数字时与 <code>^</code> 相同，向上移动一次），指定向上移动多少次。咱们还是通过实际操作看一下吧</p><h3 id="强制修改分支位置" tabindex="-1">强制修改分支位置 <a class="header-anchor" href="#强制修改分支位置" aria-label="Permalink to &quot;强制修改分支位置&quot;">​</a></h3><p>你现在是相对引用的专家了，现在用它来做点实际事情。</p><p>我使用相对引用最多的就是移动分支。可以直接使用 <code>-f</code> 选项让分支指向另一个提交。例如:</p><p><code>git branch -f main HEAD~3</code></p><p>上面的命令会将 main 分支强制指向 HEAD 的第 3 级 parent 提交。 ![[Pasted image 20240723101932.png]]</p><h2 id="撤销变更" tabindex="-1">撤销变更 <a class="header-anchor" href="#撤销变更" aria-label="Permalink to &quot;撤销变更&quot;">​</a></h2><p>在 Git 里撤销变更的方法很多。和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。我们这个应用主要关注的是后者。</p><p>主要有两种方法用来撤销变更 —— 一是 <code>git reset</code>，还有就是 <code>git revert</code>。接下来咱们逐个进行讲解。</p><h2 id="git-reset" tabindex="-1">Git Reset <a class="header-anchor" href="#git-reset" aria-label="Permalink to &quot;Git Reset&quot;">​</a></h2><p><code>git reset</code> 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。<code>git reset</code> 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。 ![[Pasted image 20240723103908.png]] ![[Pasted image 20240723103921.png]]</p><h2 id="git-revert" tabindex="-1">Git Revert <a class="header-anchor" href="#git-revert" aria-label="Permalink to &quot;Git Revert&quot;">​</a></h2><p>虽然在你的本地分支中使用 <code>git reset</code> 很方便，但是这种“改写历史”的方法对大家一起使用的远程分支是无效的哦！</p><p>为了撤销更改并<strong>分享</strong>给别人，我们需要使用 <code>git revert</code>。 ![[Pasted image 20240723103934.png]] ![[Pasted image 20240723103946.png]]</p><h1 id="移动提交记录" tabindex="-1">移动提交记录 <a class="header-anchor" href="#移动提交记录" aria-label="Permalink to &quot;移动提交记录&quot;">​</a></h1><h2 id="git-cherry-pick" tabindex="-1">Git Cherry-pick <a class="header-anchor" href="#git-cherry-pick" aria-label="Permalink to &quot;Git Cherry-pick&quot;">​</a></h2><p>本系列的第一个命令是 <code>git cherry-pick</code>, 命令形式为:</p><ul><li><code>git cherry-pick &lt;提交号&gt;...</code></li></ul><p>如果你想将一些提交复制到当前所在的位置（<code>HEAD</code>）下面的话， Cherry-pick 是最直接的方式了。我个人非常喜欢 <code>cherry-pick</code>，因为它特别简单。 ![[Pasted image 20240723104600.png]] ![[Pasted image 20240723104617.png]]</p><h2 id="交互式的-rebase" tabindex="-1">交互式的 rebase <a class="header-anchor" href="#交互式的-rebase" aria-label="Permalink to &quot;交互式的 rebase&quot;">​</a></h2><p>当你知道你所需要的提交记录（<strong>并且</strong>还知道这些提交记录的哈希值）时, 用 cherry-pick 再好不过了 —— 没有比这更简单的方式了。</p><p>但是如果你不清楚你想要的提交记录的哈希值呢? 幸好 Git 帮你想到了这一点, 我们可以利用交互式的 rebase —— 如果你想从一系列的提交记录中找到想要的记录, 这就是最好的方法了</p><p>交互式 rebase 指的是使用带参数 <code>--interactive</code> 的 rebase 命令, 简写为 <code>-i</code></p><p>如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</p><p>在实际使用时，所谓的 UI 窗口一般会在文本编辑器 —— 如 Vim —— 中打开一个文件。 考虑到课程的初衷，我弄了一个对话框来模拟这些操作。</p><p>交互式 rebase 指的是使用带参数 <code>--interactive</code> 的 rebase 命令, 简写为 <code>-i</code></p><p>如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</p><p>在实际使用时，所谓的 UI 窗口一般会在文本编辑器 —— 如 Vim —— 中打开一个文件。 考虑到课程的初衷，我弄了一个对话框来模拟这些操作。</p><h1 id="杂项" tabindex="-1">杂项 <a class="header-anchor" href="#杂项" aria-label="Permalink to &quot;杂项&quot;">​</a></h1><h2 id="本地栈式提交" tabindex="-1">本地栈式提交 <a class="header-anchor" href="#本地栈式提交" aria-label="Permalink to &quot;本地栈式提交&quot;">​</a></h2><p>来看一个在开发中经常会遇到的情况：我正在解决某个特别棘手的 Bug，为了便于调试而在代码中添加了一些调试命令并向控制台打印了一些信息。</p><p>这些调试和打印语句都在它们各自的提交记录里。最后我终于找到了造成这个 Bug 的根本原因，解决掉以后觉得沾沾自喜！</p><p>最后就差把 <code>bugFix</code> 分支里的工作合并回 <code>main</code> 分支了。你可以选择通过 fast-forward 快速合并到 <code>main</code> 分支上，但这样的话 <code>main</code> 分支就会包含我这些调试语句了。你肯定不想这样，应该还有更好的方式……</p><p>实际我们只要让 Git 复制解决问题的那一个提交记录就可以了。跟之前我们在“整理提交记录”中学到的一样，我们可以使用</p><ul><li><code>git rebase -i</code></li><li><code>git cherry-pick</code></li></ul><p>来达到目的。</p><h2 id="提交的技巧-1" tabindex="-1">提交的技巧 #1 <a class="header-anchor" href="#提交的技巧-1" aria-label="Permalink to &quot;提交的技巧 #1&quot;">​</a></h2><p>接下来这种情况也是很常见的：你之前在 <code>newImage</code> 分支上进行了一次提交，然后又基于它创建了 <code>caption</code> 分支，然后又提交了一次。</p><p>此时你想对某个以前的提交记录进行一些小小的调整。比如设计师想修改一下 <code>newImage</code> 中图片的分辨率，尽管那个提交记录并不是最新的了。</p><p>我们可以通过下面的方法来克服困难：</p><ul><li>先用 <code>git rebase -i</code> 将提交重新排序，然后把我们想要修改的提交记录挪到最前</li><li>然后用 <code>git commit --amend</code> 来进行一些小修改</li><li>接着再用 <code>git rebase -i</code> 来将他们调回原来的顺序</li><li>最后我们把 main 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！</li></ul><p>当然完成这个任务的方法不止上面提到的一种（我知道你在看 cherry-pick 啦），之后我们会多点关注这些技巧啦，但现在暂时只专注上面这种方法。 最后有必要说明一下目标状态中的那几个<code>&#39;</code> —— 我们把这个提交移动了两次，每移动一次会产生一个 <code>&#39;</code>；而 C2 上多出来的那个是我们在使用了 amend 参数提交时产生的，所以最终结果就是这样了。</p><p>也就是说，我在对比结果的时候只会对比提交树的结构，对于 <code>&#39;</code> 的数量上的不同，并不纳入对比范围内。只要你的 <code>main</code> 分支结构与目标结构相同，我就算你通过。</p><h2 id="提交的技巧-2" tabindex="-1">提交的技巧 #2 <a class="header-anchor" href="#提交的技巧-2" aria-label="Permalink to &quot;提交的技巧 #2&quot;">​</a></h2><p><em>如果你还没有完成“提交的技巧 #1”（前一关）的话，请先通过以后再来！</em></p><p>正如你在上一关所见到的，我们可以使用 <code>rebase -i</code> 对提交记录进行重新排序。只要把我们想要的提交记录挪到最前端，我们就可以很轻松的用 <code>--amend</code> 修改它，然后把它们重新排成我们想要的顺序。</p><p>但这样做就唯一的问题就是要进行两次排序，而这有可能造成由 rebase 而导致的冲突。下面还是看看 <code>git cherry-pick</code> 是怎么做的吧。</p>',79),c=[d];function p(s,r,n,l,h,g){return t(),a("div",null,c)}const m=e(o,[["render",p]]);export{u as __pageData,m as default};
